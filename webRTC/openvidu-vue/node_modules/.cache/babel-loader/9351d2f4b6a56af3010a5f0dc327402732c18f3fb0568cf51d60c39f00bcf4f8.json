{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport { OpenVidu } from \"openvidu-browser\";\nimport UserVideo from \"./components/UserVideo\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:5000/';\nexport default {\n  name: \"App\",\n  components: {\n    UserVideo\n  },\n  data() {\n    return {\n      // OpenVidu objects\n      OV: undefined,\n      session: undefined,\n      mainStreamManager: undefined,\n      publisher: undefined,\n      subscribers: [],\n      // Join form\n      mySessionId: \"SessionA\",\n      myUserName: \"Participant\" + Math.floor(Math.random() * 100)\n    };\n  },\n  methods: {\n    joinSession() {\n      // --- 1) Get an OpenVidu object ---\n      this.OV = new OpenVidu();\n\n      // --- 2) Init a session ---\n      this.session = this.OV.initSession();\n\n      // --- 3) Specify the actions when events take place in the session ---\n\n      // On every new Stream received...\n      this.session.on(\"streamCreated\", ({\n        stream\n      }) => {\n        const subscriber = this.session.subscribe(stream);\n        this.subscribers.push(subscriber);\n      });\n\n      // On every Stream destroyed...\n      this.session.on(\"streamDestroyed\", ({\n        stream\n      }) => {\n        const index = this.subscribers.indexOf(stream.streamManager, 0);\n        if (index >= 0) {\n          this.subscribers.splice(index, 1);\n        }\n      });\n\n      // On every asynchronous exception...\n      this.session.on(\"exception\", ({\n        exception\n      }) => {\n        console.warn(exception);\n      });\n\n      // --- 4) Connect to the session with a valid user token ---\n\n      // Get a token from the OpenVidu deployment\n      this.getToken(this.mySessionId).then(token => {\n        // First param is the token. Second param can be retrieved by every user on event\n        // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n        this.session.connect(token, {\n          clientData: this.myUserName\n        }).then(() => {\n          // --- 5) Get your own camera stream with the desired properties ---\n\n          // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n          // element: we will manage it on our own) and with the desired properties\n          let publisher = this.OV.initPublisher(undefined, {\n            audioSource: undefined,\n            // The source of audio. If undefined default microphone\n            videoSource: undefined,\n            // The source of video. If undefined default webcam\n            publishAudio: true,\n            // Whether you want to start publishing with your audio unmuted or not\n            publishVideo: true,\n            // Whether you want to start publishing with your video enabled or not\n            resolution: \"640x480\",\n            // The resolution of your video\n            frameRate: 30,\n            // The frame rate of your video\n            insertMode: \"APPEND\",\n            // How the video is inserted in the target element 'video-container'\n            mirror: false // Whether to mirror your local video or not\n          });\n\n          // Set the main video in the page to display our webcam and store our Publisher\n          this.mainStreamManager = publisher;\n          this.publisher = publisher;\n\n          // --- 6) Publish your stream ---\n\n          this.session.publish(this.publisher);\n        }).catch(error => {\n          console.log(\"There was an error connecting to the session:\", error.code, error.message);\n        });\n      });\n      window.addEventListener(\"beforeunload\", this.leaveSession);\n    },\n    leaveSession() {\n      // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n      if (this.session) this.session.disconnect();\n\n      // Empty all properties...\n      this.session = undefined;\n      this.mainStreamManager = undefined;\n      this.publisher = undefined;\n      this.subscribers = [];\n      this.OV = undefined;\n\n      // Remove beforeunload listener\n      window.removeEventListener(\"beforeunload\", this.leaveSession);\n    },\n    updateMainVideoStreamManager(stream) {\n      if (this.mainStreamManager === stream) return;\n      this.mainStreamManager = stream;\n    },\n    /**\r\n     * --------------------------------------------\r\n     * GETTING A TOKEN FROM YOUR APPLICATION SERVER\r\n     * --------------------------------------------\r\n     * The methods below request the creation of a Session and a Token to\r\n     * your application server. This keeps your OpenVidu deployment secure.\r\n     *\r\n     * In this sample code, there is no user control at all. Anybody could\r\n     * access your application server endpoints! In a real production\r\n     * environment, your application server must identify the user to allow\r\n     * access to the endpoints.\r\n     *\r\n     * Visit https://docs.openvidu.io/en/stable/application-server to learn\r\n     * more about the integration of OpenVidu in your application server.\r\n     */\n    async getToken(mySessionId) {\n      const sessionId = await this.createSession(mySessionId);\n      return await this.createToken(sessionId);\n    },\n    async createSession(sessionId) {\n      const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions', {\n        customSessionId: sessionId\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data; // The sessionId\n    },\n\n    async createToken(sessionId) {\n      const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions/' + sessionId + '/connections', {}, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data; // The token\n    }\n  }\n};","map":{"version":3,"names":["axios","OpenVidu","UserVideo","defaults","headers","post","APPLICATION_SERVER_URL","process","env","NODE_ENV","name","components","data","OV","undefined","session","mainStreamManager","publisher","subscribers","mySessionId","myUserName","Math","floor","random","methods","joinSession","initSession","on","stream","subscriber","subscribe","push","index","indexOf","streamManager","splice","exception","console","warn","getToken","then","token","connect","clientData","initPublisher","audioSource","videoSource","publishAudio","publishVideo","resolution","frameRate","insertMode","mirror","publish","catch","error","log","code","message","window","addEventListener","leaveSession","disconnect","removeEventListener","updateMainVideoStreamManager","sessionId","createSession","createToken","response","customSessionId"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <div id=\"main-container\" class=\"container\">\r\n    <div id=\"join\" v-if=\"!session\">\r\n      <div id=\"img-div\">\r\n        <img src=\"resources/images/openvidu_grey_bg_transp_cropped.png\" />\r\n      </div>\r\n      <div id=\"join-dialog\" class=\"jumbotron vertical-center\">\r\n        <h1>Join a video session</h1>\r\n        <div class=\"form-group\">\r\n          <p>\r\n            <label>Participant</label>\r\n            <input v-model=\"myUserName\" class=\"form-control\" type=\"text\" required />\r\n          </p>\r\n          <p>\r\n            <label>Session</label>\r\n            <input v-model=\"mySessionId\" class=\"form-control\" type=\"text\" required />\r\n          </p>\r\n          <p class=\"text-center\">\r\n            <button class=\"btn btn-lg btn-success\" @click=\"joinSession()\">\r\n              Join!\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"session\" v-if=\"session\">\r\n      <div id=\"session-header\">\r\n        <h1 id=\"session-title\">{{ mySessionId }}</h1>\r\n        <input class=\"btn btn-large btn-danger\" type=\"button\" id=\"buttonLeaveSession\" @click=\"leaveSession\"\r\n          value=\"Leave session\" />\r\n      </div>\r\n      <div id=\"main-video\" class=\"col-md-6\">\r\n        <user-video :stream-manager=\"mainStreamManager\" />\r\n      </div>\r\n      <div id=\"video-container\" class=\"col-md-6\">\r\n        <user-video :stream-manager=\"publisher\" @click.native=\"updateMainVideoStreamManager(publisher)\" />\r\n        <user-video v-for=\"sub in subscribers\" :key=\"sub.stream.connection.connectionId\" :stream-manager=\"sub\"\r\n          @click.native=\"updateMainVideoStreamManager(sub)\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { OpenVidu } from \"openvidu-browser\";\r\nimport UserVideo from \"./components/UserVideo\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\n\r\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:5000/';\r\n\r\nexport default {\r\n  name: \"App\",\r\n\r\n  components: {\r\n    UserVideo,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      // OpenVidu objects\r\n      OV: undefined,\r\n      session: undefined,\r\n      mainStreamManager: undefined,\r\n      publisher: undefined,\r\n      subscribers: [],\r\n\r\n      // Join form\r\n      mySessionId: \"SessionA\",\r\n      myUserName: \"Participant\" + Math.floor(Math.random() * 100),\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    joinSession() {\r\n      // --- 1) Get an OpenVidu object ---\r\n      this.OV = new OpenVidu();\r\n\r\n      // --- 2) Init a session ---\r\n      this.session = this.OV.initSession();\r\n\r\n      // --- 3) Specify the actions when events take place in the session ---\r\n\r\n      // On every new Stream received...\r\n      this.session.on(\"streamCreated\", ({ stream }) => {\r\n        const subscriber = this.session.subscribe(stream);\r\n        this.subscribers.push(subscriber);\r\n      });\r\n\r\n      // On every Stream destroyed...\r\n      this.session.on(\"streamDestroyed\", ({ stream }) => {\r\n        const index = this.subscribers.indexOf(stream.streamManager, 0);\r\n        if (index >= 0) {\r\n          this.subscribers.splice(index, 1);\r\n        }\r\n      });\r\n\r\n      // On every asynchronous exception...\r\n      this.session.on(\"exception\", ({ exception }) => {\r\n        console.warn(exception);\r\n      });\r\n\r\n      // --- 4) Connect to the session with a valid user token ---\r\n\r\n      // Get a token from the OpenVidu deployment\r\n      this.getToken(this.mySessionId).then((token) => {\r\n\r\n        // First param is the token. Second param can be retrieved by every user on event\r\n        // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\r\n        this.session.connect(token, { clientData: this.myUserName })\r\n          .then(() => {\r\n\r\n            // --- 5) Get your own camera stream with the desired properties ---\r\n\r\n            // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\r\n            // element: we will manage it on our own) and with the desired properties\r\n            let publisher = this.OV.initPublisher(undefined, {\r\n              audioSource: undefined, // The source of audio. If undefined default microphone\r\n              videoSource: undefined, // The source of video. If undefined default webcam\r\n              publishAudio: true, // Whether you want to start publishing with your audio unmuted or not\r\n              publishVideo: true, // Whether you want to start publishing with your video enabled or not\r\n              resolution: \"640x480\", // The resolution of your video\r\n              frameRate: 30, // The frame rate of your video\r\n              insertMode: \"APPEND\", // How the video is inserted in the target element 'video-container'\r\n              mirror: false, // Whether to mirror your local video or not\r\n            });\r\n\r\n            // Set the main video in the page to display our webcam and store our Publisher\r\n            this.mainStreamManager = publisher;\r\n            this.publisher = publisher;\r\n\r\n            // --- 6) Publish your stream ---\r\n\r\n            this.session.publish(this.publisher);\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"There was an error connecting to the session:\", error.code, error.message);\r\n          });\r\n      });\r\n\r\n      window.addEventListener(\"beforeunload\", this.leaveSession);\r\n    },\r\n\r\n    leaveSession() {\r\n      // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\r\n      if (this.session) this.session.disconnect();\r\n\r\n      // Empty all properties...\r\n      this.session = undefined;\r\n      this.mainStreamManager = undefined;\r\n      this.publisher = undefined;\r\n      this.subscribers = [];\r\n      this.OV = undefined;\r\n\r\n      // Remove beforeunload listener\r\n      window.removeEventListener(\"beforeunload\", this.leaveSession);\r\n    },\r\n\r\n    updateMainVideoStreamManager(stream) {\r\n      if (this.mainStreamManager === stream) return;\r\n      this.mainStreamManager = stream;\r\n    },\r\n\r\n    /**\r\n     * --------------------------------------------\r\n     * GETTING A TOKEN FROM YOUR APPLICATION SERVER\r\n     * --------------------------------------------\r\n     * The methods below request the creation of a Session and a Token to\r\n     * your application server. This keeps your OpenVidu deployment secure.\r\n     *\r\n     * In this sample code, there is no user control at all. Anybody could\r\n     * access your application server endpoints! In a real production\r\n     * environment, your application server must identify the user to allow\r\n     * access to the endpoints.\r\n     *\r\n     * Visit https://docs.openvidu.io/en/stable/application-server to learn\r\n     * more about the integration of OpenVidu in your application server.\r\n     */\r\n    async getToken(mySessionId) {\r\n      const sessionId = await this.createSession(mySessionId);\r\n      return await this.createToken(sessionId);\r\n    },\r\n\r\n    async createSession(sessionId) {\r\n      const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions', { customSessionId: sessionId }, {\r\n        headers: { 'Content-Type': 'application/json', },\r\n      });\r\n      return response.data; // The sessionId\r\n    },\r\n\r\n    async createToken(sessionId) {\r\n      const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions/' + sessionId + '/connections', {}, {\r\n        headers: { 'Content-Type': 'application/json', },\r\n      });\r\n      return response.data; // The token\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}